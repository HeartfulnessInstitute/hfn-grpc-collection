syntax = "proto3";

package unifiedplatform.heartIntuneProfile.notification;
import 'common/common.proto';

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
//import "google/type/latlng.proto";

option java_package = "org.heartfulness.unifiedplatform.interfaces.grpc.notification";
option java_multiple_files = true;

enum Version {
  VERSION_1_0_0 = 0;
}

message NotificationPreferences {
  bool obt = 1;
  bool whisperAday = 2;
  bool newContent = 3; // includes audio, video and articles.
  bool announcements = 4; // from ZIC, SahajNet news
  bool newReleases = 5;
}

enum Category {
  MEDITATION_SERVICE = 0;
  PROFILE_SERVICE = 1;
  SUBSCRIPTION_SERVICE = 2;
  CONTENT_SERVICE = 3;
  DONATION_SERVICE = 4;
  NOTIFICATION_SERVICE = 5;
  SCHEDULED_CONTENT_SERVICE = 6;
}

enum SubCategory {
  LOW_PRECEPTOR_CONDITION = 0; // MS
  WAITING_FOR_PRECEPTOR_TO_START = 1; // MS
  TIMED_OUT = 2; // MS
  IN_PROGRESS_TIME_OUT = 3; // MS
  MEDITATION_COMPLETED = 4; // MS
  SCHEDULED = 5; // MS - sitting scheduled
  SEEKER_CANCELLED = 6; // MS - seeker cancelled after the sitting was scheduled.
  PRECEPTOR_CANCELLED = 7; // MS - preceptor cancelled after the sitting was scheduled.
  PRECEPTOR_NOT_AVAILABLE = 8; // Legacy - when slots are deleted due to preceptor not showing up
  PRECEPTOR_NO_SHOW = 9; // New notification type for preceptor to show up.
  READY_FOR_SITTING = 10; // remote later sitting notification 15 mins or 60 mins before f2f.
  ZERO_PRECEPTOR_CONDITION = 11; // Zero preceptor condition

  FREE_SUBSCRIPTION = 15; // PS
  WEEKLY_INSPIRATION_TOPIC_SUBCATEGORY = 16;
}

enum Topic {
  ZERO_PRECEPTOR_TOPIC = 0; // MS - 24 July 2020
  ONLINE_METRICS_TOPIC = 1; // MS for future - 20 July 2020
  WEEKLY_INSPIRATION_TOPIC = 2;
}

message Notification {
  string title = 1;
  string body = 2;
  string template = 3;
  string category = 4;
  string categorySubType = 5;
  int32 timeToLiveInSeconds = 6;
  map<string, string> data = 7;
  string sound = 8;
}

message TopicNotificationRequest {
  string topic = 1;
  string locale = 3;
  Notification notification = 2;
}

message TopicNotificationResponse {

}

message TopicSubscribeRequest {
  string topic = 1;
  string userId = 2;
  string deviceId = 3;
}

message TopicSubscribeResponse {

}

message TopicUnsubscribeRequest {
  string topic = 1;
  string userId = 2;
  string deviceId = 3;
}

message TopicUnsubscribeResponse {

}

message DeviceNotificationRequest {
  string deviceRegistrationToken = 1;
  Notification notification = 2;
}

message DeviceNotificationResponse {
  // Firebase message ID
  string messageId = 1;
  ErrorInfo error = 2;
}

message UserNotificationRequest {
  string userId = 1; // firebaseId
  string deviceId = 2; // if present then send to only that device else to all devices.
  Notification notification = 3;
}

message UserNotificationResponse {
  // Firebase message ID
  string messageId = 1;
  ErrorInfo error = 2;
}

message ErrorInfo {
  // Firebase error code.
  // Possible: https://firebase.google.com/docs/cloud-messaging/send-message#admin_sdk_error_reference
  string code = 2;
  // Firebase error message
  string message = 3;
}

message EmailNotificationRequest {
  // blind carbon copy
  repeated string bcc = 1;
  // carbon copy
  repeated string cc = 2;
  //    string from = 3;
  string replyTo = 4;
  repeated string to = 5;
  string subject = 6;
  string text = 7;
  string html = 8;

  repeated Attachment attachments = 9;

  // One of `name` or `contentId` expected.
  // If `contentId` is present then Content-Disposition is 'inline', 'attachment' otherwise.
  message Attachment {
    string name = 1;
    bytes data = 2;
    // https://en.wikipedia.org/wiki/Media_type
    string contentType = 3;
    // https://tools.ietf.org/html/rfc2392
    // Usage (inside HTML message): <img src="cid:some-image-cid" alt="img" />
    string contentId = 4;
  }
}



message EmailNotificationResponse {
  string result = 1;
  Error error = 2;

  message Error {
    string code = 1;
    string message = 2;
  }
}